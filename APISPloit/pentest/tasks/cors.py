from celery import shared_task
from pentest.helpers.utils import RequestWrapper, finishTest
from pentest.models import Payload
from requests.structures import CaseInsensitiveDict

@shared_task
def CORSTest(url, test_id, request_method, headers, data_format, body) :
    r = RequestWrapper(url, request_method, headers, data_format, body)
    response_headers = CaseInsensitiveDict(r.request.headers)
    
    #check if access-control-allow-origin is *
    if 'access-control-allow-origin' in response_headers :
        allowed_origin = response_headers['access-control-allow-origin']
        if allowed_origin == "*" :
            if 'access-control-allow-credentials' in response_headers and response_headers['access-control-allow-credentials'].lower() == "true" :
                r.saveRequestAsPayload(payload_string="Server is using * as the value of Access-Control-Allow-Origin header and Access-Control-Allow-Credentials is set to true", test_id=test_id)
            else :
                r.saveRequestAsPayload(payload_string="Server is using * as the value of Access-Control-Allow-Origin header", test_id=test_id)

    #check if application reflects arbitrary origins in the access-control-allow-origin header
    headers['Origin'] = "evil.com"

    r = RequestWrapper(url, request_method, headers, data_format, body)
    response_headers = CaseInsensitiveDict(r.request.headers)

    if 'access-control-allow-origin' in response_headers :
        allowed_origin = response_headers['access-control-allow-origin']
        if allowed_origin == "evil.com" :
            
            if 'access-control-allow-credentials' in response_headers and response_headers['access-control-allow-credentials'].lower() == "true" :
                r.saveRequestAsPayload(payload_string="Reflected Origin in Access-Control-Allow-Origin header and Access-Control-Allow-Credentials is set to true", test_id=test_id)
            else :
                r.saveRequestAsPayload(payload_string="Reflected Origin in Access-Control-Allow-Origin header", test_id=test_id)

    #check if the application trusts null origin         
    headers['Origin'] = "null"

    r = RequestWrapper(url, request_method, headers, data_format, body)
    response_headers = CaseInsensitiveDict(r.request.headers)

    if 'access-control-allow-origin' in response_headers :
        allowed_origin = response_headers['access-control-allow-origin']
        if allowed_origin == "null" :
            if 'access-control-allow-credentials' in response_headers and response_headers['access-control-allow-credentials'].lower() == "true" :
                r.saveRequestAsPayload(payload_string="The application trusts null origin and Access-Control-Allow-Credentials is set to true", test_id=test_id)
            else :
                r.saveRequestAsPayload(payload_string="The application trusts null origin", test_id=test_id)

    finishTest(test_id)