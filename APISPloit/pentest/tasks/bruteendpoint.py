from celery import shared_task
import requests, json
from pentest.models import Test, Payload
from datetime import datetime
import concurrent.futures
from pentest.helpers.utils import RequestWrapper, finishTest

def tryEndpoint(url, headers, request_method, data_format, body, status_codes, id):
    req = RequestWrapper(url, request_method, headers, data_format, body)
    if req.request.status_code in status_codes:
        req.saveRequestAsPayload(url, id)

@shared_task
def BruteEndpoint(url, headers, request_method, sc, data_format, body, id):
    with open('pentest/helpers/endpoints.txt') as f :
        paths = f.read().splitlines()

    urls = []
    for path in paths : 
        if url[-1] == "/" :
            u = url + path
        else :
            u = url + "/" + path
        urls.append(u)
    
    status_codes = [200]
    sc = sc.split(',')
    try :
        for s in sc :
            status_codes.append(int(s.replace(" ", "")))
    except ValueError:
        raise ValueError(f"invalid status code {sc}")

    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = [executor.submit(tryEndpoint, url, headers, request_method, data_format, body, status_codes, id) for url in urls]

    finishTest(id)
