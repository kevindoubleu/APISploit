from celery import shared_task
from pentest.helpers.utils import RequestWrapper, finishTest
from pentest.models import Payload
import os,json

@shared_task
def SQLITest(url,headers,request_method,data_format,body,test_id):
    new_header = "\"a:b\\n"
    for h in headers:
        new_header += f"{h}:{headers[h]}\\n"
    
    new_header += '"'
    result = ""
    types = []
    payloads = []

    if len(body) < 1:
        print(f"payload sqlinya = sqlmap -u {url} --headers {new_header} --method {request_method.upper()} --batch --ignore-code=*")
        result = os.popen(f'sqlmap -u {url} --headers {new_header} --method {request_method.upper()} --batch --ignore-code=*').read().strip()

        try:
            divider1 = result.index("---")
            divider2 = result.index("---", divider1 + 1)
            get_result = result[divider1 +3 : divider2].split("\n")
            for r in get_result:
                if r.strip().startswith("Payload:"):
                    r = r.split("Payload: ")[1]
                    payloads.append(r)
                if r.strip().startswith("Type:"):
                    r = r.split("Type: ")[1]
                    types.append(r)

            for i,p in enumerate(payloads):
                headers['API_SPLOIT_PAYLOAD'] = p
                req = RequestWrapper(p, request_method, headers, data_format, body)
                req.saveRequestAsPayload(
                    payload_string = f"URL is vulnerable to {types[i]}",
                    test_id = test_id
                )

        except:
            print("ga vulnerable")

    else:
        body = "".join(body.split())
        data = body.replace('"', '\\"')
        print(f"payload sqlinya = sqlmap -u {url} --headers {new_header} --method {request_method.upper()} --data \"{data}\" --batch --ignore-code=*")
        result = os.popen(f"sqlmap -u {url} --headers {new_header} --method {request_method.upper()} --data \"{data}\" --batch --ignore-code=*").read().strip()
        try:
            divider1 = result.index("---")
            divider2 = result.index("---", divider1 + 1)
            get_result = result[divider1 +3 : divider2].split("\n")
            for r in get_result:
                if r.strip().startswith("Payload:"):
                    r = r.split("Payload: ")[1]
                    payloads.append(r)
                if r.strip().startswith("Type:"):
                    r = r.split("Type: ")[1]
                    types.append(r)

            for i,p in enumerate(payloads):
                req = RequestWrapper(url, request_method, headers, data_format, p)
                req.saveRequestAsPayload(
                    payload_string = f"URL is vulnerable to {types[i]}",
                    test_id = test_id
                )

        except:
            print("ga vulnerable")

    finishTest(test_id)
