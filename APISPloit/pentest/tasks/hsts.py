from celery import shared_task
import requests, json
from pentest.models import Test, Payload
from datetime import datetime

def getHTTPURL(url) :
    get_url = url.split(':')[1]
    http_url = "http:" + get_url
    return http_url

def getRequest(https_url, http_url, headers, id) :
    r = requests.get(https_url, headers=headers, verify=False)
    https_resp = r.text
    
    try :
        r = requests.get(http_url, headers=headers, timeout=10, allow_redirects=False)
        http_resp = r.text
        if https_resp == http_resp :
            Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

    except :
        pass

def postRequest(https_url,http_url, headers,data_format,body,id) :
    if data_format == "JSON" :
        body = json.loads(body) 
        r = requests.post(https_url, json=body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.post(http_url, json=body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass

    elif data_format == "XML" :
        headers['Content-Type'] = "application/xml"
        r = requests.post(https_url, data = body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.post(http_url, data = body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass


def putRequest(https_url,http_url,headers,data_format,body,id) :
    if data_format == "JSON" : 
        body = json.loads(body) 
        r = requests.put(https_url, json=body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.put(http_url, json=body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass


    elif data_format == "XML" :
        headers['Content-Type'] = "application/xml"
        r = requests.put(https_url, data = body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.put(http_url, data = body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass
def deleteRequest(https_url,http_url,headers,data_format,body,id) :
    if data_format == "JSON" : 
        body = json.loads(body) 
        r = requests.delete(https_url, json=body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.delete(http_url, json=body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass


    elif data_format == "XML" :
        headers['Content-Type'] = "application/xml"
        r = requests.delete(https_url, data = body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.delete(http_url, data = body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass

def patchRequest(https_url,http_url,headers,data_format,body,id) :
    if data_format == "JSON" : 
        body = json.loads(body) 
        r = requests.patch(https_url, json=body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.patch(http_url, json=body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.create(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass


    elif data_format == "XML" :
        headers['Content-Type'] = "application/xml"
        r = requests.patch(https_url, data = body, headers=headers, verify=False)
        https_resp = r.text

        try :
            r = requests.patch(http_url, data = body, headers=headers, timeout=10, allow_redirects=False)
            http_resp = r.text
            if https_resp == http_resp :
                Payload.objects.patch(payload_string="Non-secure requests are not automatically upgraded to HTTPS", response_code = r.status_code, request_header=str(json.dumps(dict(headers))), request_body = str(body), test_id=id, response_header=str(json.dumps(dict(r.headers))),response_body = str(r.text))

        except:
            pass




@shared_task
def HSTSTest(url,headers,request_method,data_format,body,id):
    http_url = getHTTPURL(url)
    
    if request_method == "get":
        getRequest(url, http_url, headers, id)
        Test.objects.filter(pk=id).update(end_time=datetime.now())

    elif request_method == "post":
        postRequest(url, http_url, headers, data_format, body, id)
        Test.objects.filter(pk=id).update(end_time=datetime.now())

    elif request_method == "put":
        putRequest(url, http_url, headers, data_format, body, id)
        Test.objects.filter(pk=id).update(end_time=datetime.now())

    elif request_method == "delete":
        deleteRequest(url, http_url, headers, data_format, body, id)
        Test.objects.filter(pk=id).update(end_time=datetime.now())

    elif request_method == "patch":
        patchRequest(url, http_url, headers, data_format, body, id)
        Test.objects.filter(pk=id).update(end_time=datetime.now())