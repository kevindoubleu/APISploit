import json
from django.utils.functional import empty
import validators
import requests
def validateData(data):
    
    message = ""
    request_method = ["get", "post", "put", "delete", "patch"]
    data_format = ["JSON", "XML"]
    vulns = ["IDOR", "JWT", "Weak Session Management", "Rate Limit", "CORS", "SQLI", "NOSQLI", "Weak SSL", "XXE", "Brute Endpoint", "Banner Grabbing", "HSTS"]
    payload_type = ["numbers","wordlist"]

    if 'url' not in data or data['url'] == "":
        message = "URL cannot be empty"
        return {"message" : message, "status" : 400}

    if not validators.url(data['url']):
        message = "Invalid URL"
        return {"message" : message, "status" : 400}

    if data['url']:
        try :
            r = requests.get(data['url'], headers={
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36"
            }, timeout=10, verify=False)
        except:
            message = "Sorry, the website you entered is down or doesn't exist. Please try again later"
            return {"message" : message, "status" : 400}

    if 'request_method' not in data or data['request_method'] not in request_method : 
        message = "Invalid request method"
        return {"message" : message, "status" : 400}

    if 'headers' not in data or type(data['headers']) is not dict:
        message = "Invalid JSON syntax on request headers"
        return {"message" : message, "status" : 400}

    if ('data_format' not in data or data['data_format'] not in data_format) and data['request_method'] != "get" :
        message = "Invalid data format"
        return {"message" : message, "status" : 400}

    if 'vulns' not in data or len(data['vulns']) < 1 :
        message = "Invalid vulnerabilities choosen"
        return {"message" : message, "status" : 400}

    if len(data['vulns']) > 0 :
        isError = False
        message = ""
        for v in data['vulns'] :
            if v not in vulns :
                isError = True
                break 
        if isError :
            message = "Please select at least one vulnerabilty to scan"
            return {"message" : message, "status" : 400}
    
    if "NOSQLI" in data['vulns'] :
        url = data['url']
        body = str(data['body']) if 'body' in data else ""
        markerExists = False
        for u in range(len(url)):
            if url[u] == "@" and url[u-1] != "\\" :
                markerExists = True
                break

        if body != "":
            for b in range(len(body)):
                if body[b] == "@" and body[b-1] != "\\" :
                    markerExists = True
                    break

        if not markerExists :
            message = "Please define the injection point by using @ marker on the URL input or Request Body"
            return {"message" : message, "status" : 400}

    if "SQLI" in data['vulns'] :
        url = data['url']
        body = str(data['body']) if 'body' in data else ""
        markerExists = False
        for u in range(len(url)):
            if url[u] == "*" and url[u-1] != "\\" :
                markerExists = True
                break

        if body != "":
            for b in range(len(body)):
                if body[b] == "*" and body[b-1] != "\\" :
                    markerExists = True
                    break

        if not markerExists :
            message = "Please define the injection point by using * marker on the URL input or Request Body"
            return {"message" : message, "status" : 400}

    if "JWT" in data['vulns'] :
        header = data['headers']
        if "Authorization" not in header :
            message = "Please define your JWT Token on Request Headers"
            return {"message" : message, "status" : 400}

        token = header['Authorization'].split(" ")
        if(token[0] != "Bearer" or len(token)<=1) :
            message = "Invalid JWT Format"
            return {"message" : message, "status" : 400}
    
    if "Brute Endpoint" in data['vulns'] :
        if "statusCodes" not in data :
            message = "Please define the status codes"
            return {"message" : message, "status" : 400}
        else :
            if data['statusCodes'] :
                statusCodes = data['statusCodes']
                notInteger = False
                statusCodes = statusCodes.split(',')
                for sc in statusCodes :
                    try :
                        int(sc.replace(" ", ""))
                    except :
                        notInteger = True
                        break
                
                if notInteger : 
                    message = "Status codes must be an integer"
                    return {"message" : message, "status" : 400}


    if "IDOR" in data['vulns'] :
        url = data['url']
        body = str(data['body']) if 'body' in data else ""
        markerExists = False
        for u in range(len(url)):
            if url[u] == "~" and url[u-1] != "\\" :
                markerExists = True
                break

        if body != "":
            for b in range(len(body)):
                if body[b] == "~" and body[b-1] != "\\" :
                    markerExists = True
                    break
        
        if not markerExists :
            message = "Please define the injection point by using ~ marker on the URL input or Request Body"
            return {"message" : message, "status" : 400}

        if "payloadType" not in data  or data['payloadType'] not in payload_type : 
            message = "Invalid payload type"
            return {"message" : message, "status" : 400}

        if data['payloadType'] == "wordlist":
            print(data['wordlist'])
            if 'wordlist' not in data :
                message = "Invalid wordlist"
                return {"message" : message, "status" : 400}
            
            if len(data['wordlist']) < 1 :
                message = "Wordlist cannot be empty"
                return {"message" : message, "status" : 400}

            if len(data['wordlist']) > 100 :
                message = "Maximum number of words allowed is 100"
                return {"message" : message, "status" : 400}

        if data['payloadType'] == "numbers":
            if 'fromVal' not in data or 'toVal' not in data or 'stepVal' not in data :
                message = "Please define the numbers parameter"
                return {"message" : message, "status" : 400}

            if ( type(data['fromVal']) is not int and type(data['fromVal']) is not float ) or ( type(data['toVal']) is not int and type(data['toVal']) is not float ) or ( type(data['stepVal']) is not int and type(data['stepVal']) is not float ) :
                message = "Invalid number settings"
                
                return {"message" : message, "status" : 400}


    if "HSTS" in data['vulns'] :
        protocol = data['url'].split(':')[0]
        if protocol != "https" :
             message = "To scan HSTS, you must provide an URL with https"
             return {"message" : message, "status" : 400}

    return {"message" : "OK", "status" : 200}