from django.http.response import JsonResponse
from django.shortcuts import render, get_object_or_404
from .models import Scan, Test
import os
from rest_framework.parsers import JSONParser
from .validator import validateData
from django.views.decorators.csrf import csrf_exempt
from .tasks.ssl import WeakSSLTest
from .tasks.bruteendpoint import BruteEndpoint
from .tasks.banner_grabbing import BannerGrabbingTest
from .tasks.hsts import HSTSTest
from .tasks.jwt import JWTTest
from .tasks.session_mgmt import SessionManagementTest
from .tasks.cors import CORSTest
from .tasks.idor import IDORTest

@csrf_exempt
# Create your views here.
def home(request):
    if request.method == "GET" :
        ip = os.getenv("IP_ADDRESS")
        return render(request, 'pentest/index.html', {
            "url" : ip
        })
    elif request.method == "POST":
        data = JSONParser().parse(request)

        responseData = {
            "message" : "Scanning has been successfully entered into the queue. You can check the progress of the queue in /history"
        }
        result = validateData(data)

        if result['status'] != 200 :
            return JsonResponse({"message" : result['message']}, status=result['status'])

  
        s = Scan.objects.create(url = data['url'], request_method = data['request_method'])
    
        newTests = {}
        for t in data['vulns'] :
            test = Test.objects.create(test_name = t, scan_id = s.id)
            newTests[t] = test.id

        if "Weak SSL" in data['vulns'] : 
            WeakSSLTest.delay(data['url'], newTests["Weak SSL"])
        if "Brute Endpoint" in data['vulns'] : 
            BruteEndpoint.delay(data['url'], data['headers'], data['request_method'], data['statusCodes'], data['data_format'], data['body'], newTests["Brute Endpoint"])
        if "Banner Grabbing" in data['vulns']:
            BannerGrabbingTest.delay(data['url'], newTests["Banner Grabbing"])
        if "HSTS" in data['vulns'] :
            HSTSTest.delay(data['url'],data['headers'],data['request_method'],data['data_format'], data['body'], newTests['HSTS'])
        if "Weak Session Management" in data['vulns']:
            SessionManagementTest.delay(data['url'], newTests["Weak Session Management"], data['request_method'], data['headers'], data['data_format'], data['body'])
        if "JWT" in data['vulns'] :
            JWTTest.delay(data['url'], newTests['JWT'], data['request_method'], data['headers'], data['data_format'], data['body'])
        if "CORS" in data['vulns'] :
            CORSTest.delay(data['url'], newTests['CORS'], data['request_method'], data['headers'], data['data_format'], data['body'])
        if "IDOR" in data['vulns'] :
            IDORTest.delay(data['url'], newTests['IDOR'], data['request_method'], data['headers'], data['data_format'], data['body'], data['payloadType'], data['wordlist'])

        return JsonResponse(responseData)

def history(request):
    tests = Test.objects.all()
    context = {
        'tests': tests
    }
    return render(request, 'pentest/history.html', context)

def detail(request, test_id):
    test_obj = get_object_or_404(Test, pk=test_id)
    context = {
        'test': test_obj
    }
    return render(request, 'pentest/detail.html', context)
