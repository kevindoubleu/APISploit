import json
import requests
from pentest.models import Payload, Test
from datetime import datetime

class RequestWrapper:
    def __init__(self, url, request_method, headers, data_format=None, body=None, immediate_request=True):
        assert type(url) is str, "url must be a string"
        assert type(request_method) is str, f"request_method must be a string not {type(request_method)}"
        assert type(headers) is dict or str, f"headers must be a dict or str not {type(headers)}"
        assert type(data_format) is str, "data_format must be a string"
        assert type(body) is str, "body must be a string"

        self.url = url
        self.request_method = request_method
        self.headers = headers if type(headers) is dict else {}
        self.body = body
        self.session = requests.Session()
        if immediate_request:
            self.makeRequest()

        if data_format.upper() == "JSON":
            self.headers['Content-Type'] = "application/json"
        elif data_format.upper() == "XML":
            self.headers['Content-Type'] = "application/xml"
    
    def makeRequest(self):
        try:
            session_request = getattr(requests.Session, self.request_method.lower())
        except AttributeError:
            raise AttributeError(f"invalid request method {self.request_method}")

        while True: # internet gw suka rusak
            try:
                if self.request_method.upper() == "GET":
                    self.request = session_request(self=self.session, url=self.url, headers=self.headers, verify=False)
                else:
                    self.request = session_request(self=self.session, url=self.url, headers=self.headers, verify=False, data=self.body)
            except Exception as e:
                print("retrying because", e)
            

    def saveRequestAsPayload(self, payload_string, test_id):
        return Payload.objects.create(
            payload_string = payload_string,
            request_header = str(json.dumps(dict(self.request.request.headers))),
            request_body = str(self.request.request.body),
            response_code = self.request.status_code,
            response_header = str(json.dumps(dict(self.request.headers))),
            response_body = str(self.request.text),
            test_id = test_id,
        )

def finishTest(test_id):
    Test.objects.filter(pk=test_id).update(end_time=datetime.now())
