from django.db import models
import json
# Create your models here.
class Scan(models.Model):
    url = models.TextField()
    request_method = models.CharField(max_length=10)
    def __str__(self):
        return self.url + " at " + str(self.start_time)

class Endpoint(models.Model):
    path = models.CharField(max_length=100)
    status_code = models.CharField(max_length=4)
    scan = models.ForeignKey(Scan, on_delete=models.CASCADE, related_name="endpoints")
    def __str__(self):
        return self.scan.url + self.path

class Test(models.Model):
    test_name = models.CharField(max_length=60)
    start_time = models.DateTimeField(auto_now_add=True)
    end_time = models.DateTimeField(null=True)
    scan = models.ForeignKey(Scan, on_delete=models.CASCADE, related_name="tests")
    def __str__(self):
        return self.test_name + " at " + self.scan.url

    def status(self):
        if self.start_time and self.end_time:
            return "Completed"
        elif self.start_time:
            return "Scanning"
        else:
            return "Queued"
        
    def success(self):
        return len(self.payloads.all()) > 0

class Payload(models.Model):
    payload_string = models.TextField(blank=True)
    request = models.TextField(null=True)
    response_header = models.TextField(null=True)
    response_body = models.TextField(null=True)
    test = models.ForeignKey(Test, on_delete=models.CASCADE, related_name="payloads")

    def splitHeaders(self):
        headers_dict = json.loads(self.response_header)
        

        header = ""
        for k in headers_dict : 
            header += f"{k}: {headers_dict[k]}\n"

        return header

    def __str__(self):
        return self.payload_string + " on " + self.test.scan.url
    